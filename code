import json
import tkinter as tk
from tkinter import filedialog, messagebox
import re

def extract_proper_nouns(texts):
    proper_nouns = set()
    # 고유명사 패턴: 한글, 영어 대문자 단어로 구성된 경우
    pattern = re.compile(r'\b[A-Z][a-z]*|[가-힣]+\b')
    
    # 불필요한 단어 리스트: 접속사, 전치사, 조사, 기타 불필요한 단어 및 동명사 등
    stopwords = {
        '그리고', '그러나', '그래서', '또는', '그렇지만', '따라서', '하지만', '그럼에도', '또한', '즉', '그런데',
        '때문에', '그러므로', '그러니까', '뿐만 아니라', '만약', '이와 같은', '위해', '및', '중', '대해', '대한',
        '통해', '속', '다른', '어떤', '모든', '각', '각각', '하는', '한', '이', '그', '저', '것', '수', '등',
        '등등', '로서', '부터', '까지', '처럼', '같은', '때', '곳', '자', '그녀', '그들', '그것', '이것', '저것',
        '누구', '무엇', '어디', '언제', '어떻게', '왜', '그래서', '때문에', '그러므로', '게다가', '결국', '하지만',
        '그렇지만', '따라서', '또한', '혹은', '그리고', '그러나', '그런데', '즉', '그러면', '그러니까', '요컨대',
        '그래도', '아니라', '일뿐', '게다가', '더구나', '그러면', '그래도', '도', '에서', '으로', '와', '과', '의',
        '를', '을', '가', '이', '에', '게', '까지', '부터', '에', '까지', '에게', '한테', '밖에', '대로', '처럼',
        '하기', '하여', '해서', '된다', '하고', '하려는', '위한', '합니다', '하는', '한다', '된', '했다', '해요', '하면서',
        # 영어 접속사 및 전치사
        'and', 'or', 'but', 'so', 'because', 'however', 'therefore', 'thus', 'although', 'though',
        'moreover', 'furthermore', 'meanwhile', 'otherwise', 'instead', 'hence', 'nevertheless',
        'nonetheless', 'since', 'whereas', 'while', 'if', 'unless', 'until', 'before', 'after',
        'once', 'when', 'whenever', 'wherever', 'whether', 'throughout', 'despite', 'during',
        'including', 'among', 'besides', 'without', 'within', 'outside', 'toward', 'against', 'among',
        'between', 'behind', 'under', 'above', 'over', 'below', 'near', 'by', 'next', 'to', 'from', 'with', 'of', 'in', 'on', 'at', 'about', 'as', 'for'
    }
    
    for text in texts:
        words = pattern.findall(text)
        for word in words:
            # 한글이나 영어 대문자로 시작하는 단어만 고유명사로 간주하고, stopwords에 포함되지 않은 단어만 추가
            if (word[0].isupper() or word[0] >= '가' and word[0] <= '힣') and word.lower() not in stopwords:
                proper_nouns.add(word)
    
    return list(proper_nouns)

def save_to_json(proper_nouns, filename):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(proper_nouns, f, ensure_ascii=False, indent=4)
        messagebox.showinfo("완료", f"고유명사 사전이 '{filename}'에 저장되었습니다!")
    except Exception as e:
        messagebox.showerror("오류", f"파일을 저장하는 도중 오류가 발생했습니다: {str(e)}")

def open_file():
    file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if not file_path:
        return []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            texts = f.readlines()
        return texts
    except Exception as e:
        messagebox.showerror("오류", f"파일을 여는 도중 오류가 발생했습니다: {str(e)}")
        return []

def process_texts(texts, filename, augmentation_factor=1):
    try:
        augmented_texts = augment_texts(texts, augmentation_factor)
        proper_nouns = extract_proper_nouns(augmented_texts)
        save_to_json(proper_nouns, filename)
    except Exception as e:
        messagebox.showerror("오류", f"텍스트를 처리하는 도중 오류가 발생했습니다: {str(e)}")

def process_augmentation_only(texts, filename, augmentation_factor=1):
    try:
        augmented_texts = augment_texts(texts, augmentation_factor)
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(augmented_texts, f, ensure_ascii=False, indent=4)
        messagebox.showinfo("완료", f"증강된 데이터가 '{filename}'에 저장되었습니다!")
    except Exception as e:
        messagebox.showerror("오류", f"텍스트를 처리하는 도중 오류가 발생했습니다: {str(e)}")

def main():
    root = tk.Tk()
    root.title("고유명사 사전 생성기")

    def start_processing():
        texts = open_file()
        if not texts:
            messagebox.showwarning("경고", "텍스트 파일을 선택하세요.")
            return
        filename = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
        if not filename:
            return
        augmentation_factor = int(augmentation_factor_entry.get())
        process_texts(texts, filename, augmentation_factor)
    
    def start_augmentation_only():
        texts = open_file()
        if not texts:
            messagebox.showwarning("경고", "텍스트 파일을 선택하세요.")
            return
        filename = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
        if not filename:
            return
        augmentation_factor = int(augmentation_factor_entry.get())
        process_augmentation_only(texts, filename, augmentation_factor)
    
    tk.Label(root, text="증강 계수 (정수 입력):").pack(padx=10, pady=5)
    augmentation_factor_entry = tk.Entry(root)
    augmentation_factor_entry.pack(padx=10, pady=5)
    augmentation_factor_entry.insert(0, "1")  # 기본값 설정
    
    tk.Button(root, text="고유명사 추출 및 저장", command=start_processing).pack(pady=10)
    tk.Button(root, text="데이터 증강만 수행", command=start_augmentation_only).pack(pady=10)
    
    root.mainloop()

if __name__ == "__main__":
    main()

